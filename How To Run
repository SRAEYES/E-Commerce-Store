How to run file -
detailed step-by-step guide to run your e-commerce store with both the backend and frontend working seamlessly
1. Set Up Backend (Express.js with MongoDB)
Step 1.1: Install Prerequisites
Install Node.js:
Download from Node.js Official Website.
Install MongoDB:
For local MongoDB, follow MongoDB Installation Guide.
Alternatively, use MongoDB Atlas for a cloud-hosted database.
Step 1.2: Create the Backend Project
Create a new project folder:
bash
Copy code
mkdir ecommerce-store
cd ecommerce-store
Initialize a Node.js project:
bash
Copy code
npm init -y
Install required dependencies:
bash
Copy code
npm install express mongoose body-parser
Step 1.3: Write Backend Code
Create server.js file:

Copy the backend code from the response and save it as server.js in the root of your project folder.
Update MongoDB URI:

If using MongoDB Atlas, replace:
javascript
Copy code
const mongoURI = 'mongodb://localhost/ecommerce';
with your Atlas URI (remember to replace <username> and <password> with your credentials).
Step 1.4: Seed Sample Data
Run the backend server:
bash
Copy code
node server.js
Seed the database:
Open your browser and visit:
bash
Copy code
http://localhost:3000/seed
This will populate the database with sample products.

2. Set Up Frontend (HTML, CSS, JS)
Step 2.1: Create the Frontend Structure
Inside the ecommerce-store folder, create a public directory:
bash
Copy code
mkdir public
Create the following files in the public folder:
index.html: Copy and save the frontend HTML code here.
styles.css: Copy and save the CSS code here.
script.js: Copy and save the JavaScript code here.
Step 2.2: Link Files to Backend
The server.js file is already set up to serve the frontend files from the public folder.

Step 2.3: Start the Frontend
The backend server automatically serves the frontend.
Open your browser and go to:
arduino
Copy code
http://localhost:3000

3. Test the E-Commerce Store
Verify Product Listings:
Products should be displayed dynamically using the data from MongoDB.
Add Products to Cart:
Click on "Add to Cart" buttons and see the cart count update in real time.
Check Responsiveness:
Test on different screen sizes to ensure the store is mobile-friendly.
